#include <math.h>

// Automatic Loudness Control

#define TARGET_LEVEL			3000
#define MUSIC_HEAD_POS			(32000 * 2)
#define DEFAULT_HEAD_LENGTH		(32000 * 10)
#define PLAY_FRAME				1000
#define GAIN_MAX				20

#ifndef min
#define min(a,b)	((a) < (b)? (a) : (b))
#endif
#ifndef max
#define max(a,b)	((a) > (b)? (a) : (b))
#endif

int audio_level(short *audio, int channels, int length)
{
	int i;
	float level = 0;

	for (i = 0; i < channels * length; i++)
		level += audio[i] * audio[i];

	return (int)sqrt(level / (channels * length));
}

static float average_level = 0;
static float gain = 1;

void alc_set(int level)
{
	average_level = (float)level;
	gain = min(GAIN_MAX, TARGET_LEVEL / average_level);
}

void alc_run(short *audio, int channels, int length)
{
	float energy = 0;
	int i;

	for (i = 0; i < channels * length; i++)
		energy += audio[i] * audio[i];
	energy = (float)sqrt(energy / (channels * length));

	if (energy > average_level)
		average_level += 0.01f * (energy - average_level);
	else if (energy < average_level)
		average_level += 0.002f * (energy - average_level);

	alc_set((int)average_level);

	for (i = 0; i < channels * length; i++)
	{
		int out = (int)(gain * audio[i]);
		audio[i] = max(-32768, min(32767, out));
	}
}


//-------------- Demo --------------

#include <stdio.h>
#include <string.h>

char fname[12][64] =
{
	"Ed Sheeran - New York.wav",
	"Ed Sheeran - New York2.wav",
	"Ed Sheeran - New York3.wav",
	"周杰伦 - 彩虹.wav",
	"周杰伦 - 彩虹2.wav",
	"周杰伦 - 彩虹3.wav",
	"周杰伦 - 淡水海边.wav",
	"周杰伦 - 淡水海边2.wav",
	"周杰伦 - 淡水海边3.wav",
	"陈奕迅 - 七百年后.wav",
	"陈奕迅 - 七百年后2.wav",
	"陈奕迅 - 七百年后3.wav"
};

void preprocessing_demo()
{
	int i, level, channels = 2;
	short buf[2 * DEFAULT_HEAD_LENGTH];

	for (i = 0; i < 12; i++)
	{
		FILE *fp = fopen(fname[i], "rb");
		if (!fp)	continue;

		// 读从 MUSIC_HEAD_POS 开始，DEFAULT_HEAD_LENGTH 个采样的数据到缓冲区
		fseek(fp, 44 + channels * MUSIC_HEAD_POS * sizeof(short), SEEK_SET);
		fread(buf, channels * DEFAULT_HEAD_LENGTH * sizeof(short), 1, fp);
		fclose(fp);

		// 获得音乐起始位置的信号强度
		level = audio_level(buf, 2, DEFAULT_HEAD_LENGTH);

		// 为每个音乐文件保存信号强度数据
		strcpy(fname[i] + strlen(fname[i]) - 3, "lev");
		fp = fopen(fname[i], "wt");
		if (fp)
		{
			fprintf(fp, "%d", level);
			fclose(fp);
		}
	}
}

void playing_demo()
{
	int i, level, channels = 2;
	short buf[2 * PLAY_FRAME];
	FILE *fp, *fpo;

	for (i = 0; i < 12; i++)
	{
		// 读音乐文件的信号强度数据
		strcpy(fname[i] + strlen(fname[i]) - 3, "lev");
		fp = fopen(fname[i], "rt");
		fscanf(fp, "%d", &level);
		fclose(fp);

		// 为 ALC 设置音乐的起始信号强度
		alc_set(level);

		strcpy(fname[i] + strlen(fname[i]) - 3, "wav");
		fp = fopen(fname[i], "rb");
		if (!fp)	continue;

		strcpy(fname[i] + strlen(fname[i]) - 4, " alc.wav");
		fpo = fopen(fname[i], "wb");
		if (!fp)	continue;
		
		fread(buf, 44, 1, fp);
		fwrite(buf, 44, 1, fpo);

		// 读 PLAY_FRAME 个采样的音乐数据
		while (fread(buf, channels * PLAY_FRAME * sizeof(short), 1, fp))
		{
			// 对音乐数据做自动等响度控制
			alc_run(buf, channels, PLAY_FRAME);

			// 保存经过等响度控制的音乐数据
			fwrite(buf, channels * PLAY_FRAME * sizeof(short), 1, fpo);
		}

		fclose(fp);
		fclose(fpo);
	}
}

void main()
{
#if 0
	// 演示在 server 端为每首音乐统计起始音乐强度数据
	preprocessing_demo();

#else
	// 演示在音箱端对音乐数据做自动等响度控制
	playing_demo();

#endif
}